/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 29 19:18:04 GMT 2020
 */

package com.alibaba.fastjson.serializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.ToStringSerializer;
import com.alibaba.fastjson.util.FieldInfo;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ToStringSerializer_ESTest extends ToStringSerializer_ESTest_scaffolding {

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: O teste em questão verifica se ao passar null 
   * como parametro JSONSerializer, o método write gera a exceção
   * experada (NullPointerException)
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ToStringSerializer toStringSerializer0 = ToStringSerializer.instance;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        toStringSerializer0.write((JSONSerializer) null, object0, object0, (Type) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.ToStringSerializer", e);
      }
  }

  /**
   * COMPREENSÍVEL: Não
   * DE FÁCIL CRIAÇÃO: Não
   * IMPORTANTE PARA O CONTEXTO: Não foi possível definir
   * ----------------------------------------------------------
   * DESCRIÇÃO: Devido a toda a estrutura necessária para preparar
   * o teste, não foi possível compreender o que de fato
   * o teste deve fazer. Dessa forma, não foi possível determinar 
   * se o teste é importante para o contexto.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ToStringSerializer toStringSerializer0 = new ToStringSerializer();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeConfig0);
      Class<Object> class0 = Object.class;
      Class<Field> class1 = Field.class;
      Class<Integer> class2 = Integer.class;
      FieldInfo fieldInfo0 = new FieldInfo("90$wHCvaC^WA4", class1, class2, (Type) null, (Field) null, 95, 1537, 169);
      toStringSerializer0.write(jSONSerializer0, (Object) null, fieldInfo0, class0, 95);
      assertFalse(fieldInfo0.unwrapped);
  }
}
