/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 29 19:25:59 GMT 2020
 */

package com.alibaba.fastjson.serializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.util.FieldInfo;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BeanContext_ESTest extends BeanContext_ESTest_scaffolding {

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: O teste em questão verifica se a quando BeanContext
   * recebe FieldInfo com o parâmetro name = "", também retorna "" no método
   * getName.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<Method> class0 = Method.class;
      FieldInfo fieldInfo0 = new FieldInfo("", class0, class0, class0, (Field) null, 0, 0, 2760);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      String string0 = beanContext0.getName();
      assertEquals("", string0);
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: O teste em questão verifica se a quando BeanContext
   * recebe FieldInfo com o parâmetro fieldType null, também retorna null no método
   * getFieldType.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Object> class0 = Object.class;
      FieldInfo fieldInfo0 = new FieldInfo("$RMchlTpzH|,;bHMh9h", class0, class0, (Type) null, (Field) null, (-9), 0, 1);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      Type type0 = beanContext0.getFieldType();
      assertNull(type0);
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: O teste em questão verifica se a quando BeanContext
   * recebe FieldInfo com o parâmetro serialzeFeatures = 0, também retorna 0 no método
   * getFeatures.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      FieldInfo fieldInfo0 = new FieldInfo("DisableSpecialKeyDetect", class0, class0, class0, (Field) null, 327, 0, 327);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      int int0 = beanContext0.getFeatures();
      assertEquals(0, int0);
  }

  /**
   * COMPREENSÍVEL: Sim
   * DE FÁCIL CRIAÇÃO: Sim
   * IMPORTANTE PARA O CONTEXTO: Sim
   * ----------------------------------------------------------
   * DESCRIÇÃO: O teste em questão verifica se a quando BeanContext
   * recebe FieldInfo com o parâmetro serialzeFeatures sendo negativo, também retorna o valor negativo no método
   * getFeatures.
   * ----------------------------------------------------------
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      FieldInfo fieldInfo0 = new FieldInfo("DisableSpecialKeyDetect", class0, class0, class0, (Field) null, 327, (-21), 327);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      int int0 = beanContext0.getFeatures();
      assertEquals((-21), int0);
  }
}
