/*
 * This file was automatically generated by EvoSuite
 * Sat Feb 29 19:22:41 GMT 2020
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.util.GenericArrayTypeImpl;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import java.lang.reflect.Type;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ParameterizedTypeImpl_ESTest extends ParameterizedTypeImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl(type0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, genericArrayTypeImpl0, genericArrayTypeImpl0);
      parameterizedTypeImpl0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl(type0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, genericArrayTypeImpl0, genericArrayTypeImpl0);
      Type type1 = parameterizedTypeImpl0.getRawType();
      assertSame(genericArrayTypeImpl0, type1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl(type0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, genericArrayTypeImpl0, genericArrayTypeImpl0);
      Type type1 = parameterizedTypeImpl0.getOwnerType();
      assertSame(genericArrayTypeImpl0, type1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl(type0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, genericArrayTypeImpl0, genericArrayTypeImpl0);
      Type[] typeArray0 = new Type[7];
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[5], parameterizedTypeImpl0);
      Type[] typeArray1 = parameterizedTypeImpl1.getActualTypeArguments();
      assertEquals(7, typeArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      Type[] typeArray1 = parameterizedTypeImpl0.getActualTypeArguments();
      assertSame(typeArray1, typeArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Type[] typeArray0 = new Type[5];
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl((Type) null);
      typeArray0[2] = (Type) genericArrayTypeImpl0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], genericArrayTypeImpl0);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, genericArrayTypeImpl0, genericArrayTypeImpl0);
      // Undeclared exception!
      try { 
        parameterizedTypeImpl0.equals(parameterizedTypeImpl1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.GenericArrayTypeImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      String string0 = parameterizedTypeImpl0.getTypeName();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Type[] typeArray0 = new Type[1];
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, (Type) null, type0);
      boolean boolean0 = parameterizedTypeImpl0.equals(parameterizedTypeImpl1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, parameterizedTypeImpl0);
      boolean boolean0 = parameterizedTypeImpl0.equals(parameterizedTypeImpl1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, (Type) null, (Type) null);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl0, parameterizedTypeImpl0);
      boolean boolean0 = parameterizedTypeImpl1.equals(parameterizedTypeImpl0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl(type0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, genericArrayTypeImpl0, genericArrayTypeImpl0);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl((Type[]) null, genericArrayTypeImpl0, genericArrayTypeImpl0);
      boolean boolean0 = parameterizedTypeImpl0.equals(parameterizedTypeImpl1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());
      GenericArrayTypeImpl genericArrayTypeImpl0 = new GenericArrayTypeImpl(type0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, genericArrayTypeImpl0, genericArrayTypeImpl0);
      Type[] typeArray0 = new Type[7];
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[5], parameterizedTypeImpl0);
      boolean boolean0 = parameterizedTypeImpl0.equals(parameterizedTypeImpl1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      boolean boolean0 = parameterizedTypeImpl0.equals(parameterizedTypeImpl1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      boolean boolean0 = parameterizedTypeImpl0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      boolean boolean0 = parameterizedTypeImpl0.equals(parameterizedTypeImpl0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      boolean boolean0 = parameterizedTypeImpl0.equals("com.alibaba.fastjson.util.ParameterizedTypeImpl@0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      Type type0 = parameterizedTypeImpl0.getRawType();
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      Type type0 = parameterizedTypeImpl0.getOwnerType();
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl((Type[]) null, (Type) null, (Type) null);
      Type[] typeArray0 = parameterizedTypeImpl0.getActualTypeArguments();
      assertNull(typeArray0);
  }
}
